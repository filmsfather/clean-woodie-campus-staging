name: Deploy to EC2

on:
  push:
    branches:
      - main
    paths-ignore:
      - '**/*.md'
      - '.github/**'
      - '!.github/workflows/**'
  workflow_dispatch:

concurrency:
  group: deploy-ec2-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test-and-lint:
    name: Test and Lint
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js and pnpm
        uses: ./.github/actions/setup-node-pnpm
        
      - name: Run linter
        run: pnpm run lint
        
      - name: Run type check
        run: pnpm run type-check
        
      - name: Run tests
        run: pnpm run test

  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: test-and-lint
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js and pnpm
        uses: ./.github/actions/setup-node-pnpm
        
      - name: Build application
        run: pnpm run build
        env:
          VITE_SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          VITE_SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
          
      - name: Create deployment package
        run: |
          tar -czf deployment.tar.gz \
            packages/*/dist \
            packages/*/package.json \
            package.json \
            pnpm-lock.yaml \
            pnpm-workspace.yaml \
            Dockerfile \
            nginx.conf \
            ecosystem.config.js \
            start.sh
            
      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: deployment-package
          path: deployment.tar.gz
          retention-days: 1

  deploy:
    name: Deploy to EC2
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: production
      url: http://${{ secrets.EC2_HOST }}
    
    steps:
      - name: Download deployment package
        uses: actions/download-artifact@v4
        with:
          name: deployment-package
          
      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts
          
      - name: Deploy to EC2
        run: |
          # 배포 패키지를 EC2로 전송
          scp -i ~/.ssh/id_rsa deployment.tar.gz ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:/tmp/
          
          # EC2에서 배포 실행
          ssh -i ~/.ssh/id_rsa ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} "
            # 배포 디렉토리로 이동
            cd /home/${{ secrets.EC2_USER }}/cleanWoodieCampus
            
            # 기존 파일 백업
            if [ -d dist_backup ]; then rm -rf dist_backup; fi
            if [ -d packages ]; then mv packages dist_backup; fi
            
            # 새 파일 압축 해제
            tar -xzf /tmp/deployment.tar.gz
            
            # 환경변수 파일 생성
            cat > .env.production << EOF
          NODE_ENV=production
          SUPABASE_URL=${{ secrets.SUPABASE_URL }}
          SUPABASE_ANON_KEY=${{ secrets.SUPABASE_ANON_KEY }}
          SUPABASE_SERVICE_ROLE_KEY=${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
          JWT_SECRET=${{ secrets.JWT_SECRET }}
          CORS_ORIGIN=${{ secrets.CORS_ORIGIN }}
          EOF
            
            # Docker 이미지 빌드
            docker build -t cleanwoodiecampus:latest .
            
            # 기존 컨테이너 중지
            docker stop cleanwoodiecampus || true
            docker rm cleanwoodiecampus || true
            
            # 새 컨테이너 실행
            docker run -d \\
              --name cleanwoodiecampus \\
              --restart unless-stopped \\
              -p 80:80 \\
              -p 3000:3000 \\
              --env-file .env.production \\
              cleanwoodiecampus:latest
            
            # 임시 파일 정리
            rm -f /tmp/deployment.tar.gz
            
            # 헬스체크
            sleep 15
            if ! curl -f http://localhost/health; then
              echo 'Health check failed, rolling back...'
              docker stop cleanwoodiecampus || true
              docker rm cleanwoodiecampus || true
              if [ -d dist_backup ]; then mv dist_backup packages; fi
              exit 1
            fi
            
            # 이전 Docker 이미지 정리
            docker image prune -f
            
            echo 'Deployment completed successfully!'
          "

  notify:
    name: Notify Deployment
    runs-on: ubuntu-latest
    needs: [deploy]
    if: always()
    
    steps:
      - name: Notify success
        if: needs.deploy.result == 'success'
        run: |
          echo "✅ Deployment to EC2 completed successfully!"
          echo "🌐 Application URL: http://${{ secrets.EC2_HOST }}"
          
      - name: Notify failure
        if: needs.deploy.result == 'failure'
        run: |
          echo "❌ Deployment to EC2 failed!"
          exit 1
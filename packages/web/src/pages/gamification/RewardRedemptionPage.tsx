import React, { useState } from 'react';
import { useAuth } from '../../hooks/useAuth';
import { FeatureGuard } from '../../components/auth/FeatureGuard';
import { Button, Card, Badge, Avatar, Select, Modal } from '../../components/ui';
import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';
import { RewardDto, RewardRedemptionDto } from '@woodie/application';

// Application Layer DTO ÌÉÄÏûÖ ÏßÅÏ†ë ÏÇ¨Ïö© (DTO-First ÏõêÏπô)
interface GetAvailableRewardsResponse {
  rewards: RewardDto[];
  categories: Array<{
    category: string;
    displayName: string;
    rewards: RewardDto[];
    totalCount: number;
  }>;
  studentTokenBalance: number;
  recentRedemptions: RewardRedemptionDto[];
}

interface RedeemRewardRequest {
  studentId: string;
  rewardCode: string;
}

/**
 * RedeemRewardUseCase ‚Üí RewardRedemptionPage
 * Î≥¥ÏÉÅ Ïπ¥ÌÉàÎ°úÍ∑∏ Î∞è ÍµêÌôò UI ÌëúÎ©¥
 */
export const RewardRedemptionPage: React.FC = () => {
  const { user } = useAuth();
  const [selectedCategory, setSelectedCategory] = useState<string>('all');
  const [selectedReward, setSelectedReward] = useState<RewardDto | null>(null);
  const [showRedemptionModal, setShowRedemptionModal] = useState(false);
  const queryClient = useQueryClient();

  // GetAvailableRewards Ìò∏Ï∂ú (Í∞ÄÏÉÅÏùò UseCase)
  const { data, isLoading, error, refetch } = useQuery({
    queryKey: ['availableRewards', user?.id, selectedCategory],
    queryFn: async (): Promise<GetAvailableRewardsResponse> => {
      await new Promise(resolve => setTimeout(resolve, 800));
      
      // Mock Îç∞Ïù¥ÌÑ∞ (Application DTO ÌòïÌÉú)
      const mockRewards: RewardDto[] = [
        {
          id: 'reward-1',
          code: 'digital-badge-first-place',
          name: '1Îì± Îã¨ÏÑ± Î∞∞ÏßÄ',
          description: 'Ï≤òÏùåÏúºÎ°ú 1Îì±ÏùÑ Îã¨ÏÑ±Ìïú ÌïôÏÉùÏóêÍ≤å Ï£ºÏñ¥ÏßÄÎäî ÌäπÎ≥ÑÌïú Î∞∞ÏßÄÏûÖÎãàÎã§.',
          category: 'digital_badge',
          tokenCost: 500,
          maxRedemptions: undefined,
          currentRedemptions: 12,
          remainingStock: undefined,
          isActive: true,
          iconUrl: 'ü•á',
          expiresAt: undefined,
          createdAt: new Date().toISOString(),
          isAvailable: true,
          canAfford: (user?.role === 'student' && mockTokenBalance >= 500) || false
        },
        {
          id: 'reward-2',
          code: 'feature-unlock-advanced-stats',
          name: 'Í≥†Í∏â ÌÜµÍ≥Ñ Í∏∞Îä• Ïû†Í∏à Ìï¥Ï†ú',
          description: 'ÏÉÅÏÑ∏Ìïú ÌïôÏäµ Î∂ÑÏÑùÍ≥º Í∞úÏù∏ ÎßûÏ∂§ Î¶¨Ìè¨Ìä∏Î•º ÌôïÏù∏Ìï† Ïàò ÏûàÎäî Í∏∞Îä•ÏùÑ 7ÏùºÍ∞Ñ Ïù¥Ïö©Ìï† Ïàò ÏûàÏäµÎãàÎã§.',
          category: 'feature_unlock',
          tokenCost: 300,
          maxRedemptions: 1,
          currentRedemptions: 0,
          remainingStock: 1,
          isActive: true,
          iconUrl: 'üìä',
          expiresAt: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString(),
          createdAt: new Date().toISOString(),
          isAvailable: true,
          canAfford: (user?.role === 'student' && mockTokenBalance >= 300) || false
        },
        {
          id: 'reward-3',
          code: 'virtual-item-study-pet',
          name: 'Í≥µÎ∂Ä Ìé´ (Í∞ÄÏÉÅ ÎèôÎ¨º)',
          description: 'ÌïôÏäµÏùÑ ÎèÑÏôÄÏ£ºÎäî Í∑ÄÏó¨Ïö¥ Í∞ÄÏÉÅ Ìé´ÏûÖÎãàÎã§. Ïä§Ìä∏Î¶≠Ïù¥ Ïú†ÏßÄÎê†ÏàòÎ°ù Îçî Í±¥Í∞ïÌï¥ÏßëÎãàÎã§.',
          category: 'virtual_item',
          tokenCost: 800,
          maxRedemptions: undefined,
          currentRedemptions: 5,
          remainingStock: undefined,
          isActive: true,
          iconUrl: 'üêæ',
          expiresAt: undefined,
          createdAt: new Date().toISOString(),
          isAvailable: true,
          canAfford: (user?.role === 'student' && mockTokenBalance >= 800) || false
        },
        {
          id: 'reward-4',
          code: 'special-privilege-hint-pack',
          name: 'Î¨∏Ï†ú ÌûåÌä∏ Ìå© (5Í∞ú)',
          description: 'Ïñ¥Î†§Ïö¥ Î¨∏Ï†úÏóêÏÑú ÏÇ¨Ïö©Ìï† Ïàò ÏûàÎäî ÌûåÌä∏ 5Í∞úÎ•º Ï†úÍ≥µÌï©ÎãàÎã§.',
          category: 'special_privilege',
          tokenCost: 200,
          maxRedemptions: 10,
          currentRedemptions: 3,
          remainingStock: 7,
          isActive: true,
          iconUrl: 'üí°',
          expiresAt: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString(),
          createdAt: new Date().toISOString(),
          isAvailable: true,
          canAfford: (user?.role === 'student' && mockTokenBalance >= 200) || false
        },
        {
          id: 'reward-5',
          code: 'cosmetic-theme-dark-mode',
          name: 'Îã§ÌÅ¨ Î™®Îìú ÌÖåÎßà',
          description: 'ÎààÏù¥ Ìé∏ÏïàÌïú Îã§ÌÅ¨ Î™®Îìú ÌÖåÎßàÎ•º ÏòÅÍµ¨Ï†ÅÏúºÎ°ú ÏÇ¨Ïö©Ìï† Ïàò ÏûàÏäµÎãàÎã§.',
          category: 'cosmetic',
          tokenCost: 150,
          maxRedemptions: 1,
          currentRedemptions: 0,
          remainingStock: 1,
          isActive: true,
          iconUrl: 'üåô',
          expiresAt: undefined,
          createdAt: new Date().toISOString(),
          isAvailable: true,
          canAfford: (user?.role === 'student' && mockTokenBalance >= 150) || false
        },
        {
          id: 'reward-6',
          code: 'digital-badge-streak-master',
          name: 'Ïä§Ìä∏Î¶≠ ÎßàÏä§ÌÑ∞ Î∞∞ÏßÄ',
          description: '30Ïùº Ïó∞ÏÜç ÌïôÏäµÏùÑ Îã¨ÏÑ±Ìïú ÌïôÏÉùÏóêÍ≤å Ï£ºÏñ¥ÏßÄÎäî Î™ÖÏòà Î∞∞ÏßÄÏûÖÎãàÎã§.',
          category: 'digital_badge',
          tokenCost: 1000,
          maxRedemptions: undefined,
          currentRedemptions: 2,
          remainingStock: undefined,
          isActive: true,
          iconUrl: 'üî•',
          expiresAt: undefined,
          createdAt: new Date().toISOString(),
          isAvailable: false, // Ï°∞Í±¥ ÎØ∏Ï∂©Ï°±
          canAfford: false
        }
      ];

      const mockTokenBalance = user?.role === 'student' ? 
        (user.id === 'student-1' ? 850 :
         user.id === 'student-2' ? 620 :
         user.id === 'student-3' ? 350 : 180) : 0;

      const categories = [
        {
          category: 'digital_badge',
          displayName: 'ÎîîÏßÄÌÑ∏ Î∞∞ÏßÄ',
          rewards: mockRewards.filter(r => r.category === 'digital_badge'),
          totalCount: mockRewards.filter(r => r.category === 'digital_badge').length
        },
        {
          category: 'feature_unlock',
          displayName: 'Í∏∞Îä• Ïû†Í∏à Ìï¥Ï†ú',
          rewards: mockRewards.filter(r => r.category === 'feature_unlock'),
          totalCount: mockRewards.filter(r => r.category === 'feature_unlock').length
        },
        {
          category: 'virtual_item',
          displayName: 'Í∞ÄÏÉÅ ÏïÑÏù¥ÌÖú',
          rewards: mockRewards.filter(r => r.category === 'virtual_item'),
          totalCount: mockRewards.filter(r => r.category === 'virtual_item').length
        },
        {
          category: 'special_privilege',
          displayName: 'ÌäπÎ≥Ñ ÌòúÌÉù',
          rewards: mockRewards.filter(r => r.category === 'special_privilege'),
          totalCount: mockRewards.filter(r => r.category === 'special_privilege').length
        },
        {
          category: 'cosmetic',
          displayName: 'Ïô∏Í¥Ä Î≥ÄÍ≤Ω',
          rewards: mockRewards.filter(r => r.category === 'cosmetic'),
          totalCount: mockRewards.filter(r => r.category === 'cosmetic').length
        }
      ];

      const recentRedemptions: RewardRedemptionDto[] = user?.role === 'student' ? [
        {
          id: 'redemption-1',
          studentId: user.id,
          rewardId: 'reward-4',
          reward: mockRewards.find(r => r.id === 'reward-4'),
          tokenCost: 200,
          status: 'completed',
          redeemedAt: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000).toISOString(),
          completedAt: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000).toISOString(),
          processingTimeMinutes: 0
        }
      ] : [];

      return {
        rewards: mockRewards,
        categories,
        studentTokenBalance: mockTokenBalance,
        recentRedemptions
      };
    },
    enabled: !!user?.id,
    refetchInterval: 5 * 60 * 1000 // 5Î∂ÑÎßàÎã§ Í∞±Ïã†
  });

  // RedeemRewardUseCase Ìò∏Ï∂ú
  const redeemMutation = useMutation({
    mutationFn: async (request: RedeemRewardRequest): Promise<RewardRedemptionDto> => {
      await new Promise(resolve => setTimeout(resolve, 1500));
      
      // Mock ÏùëÎãµ
      const reward = data?.rewards.find(r => r.code === request.rewardCode);
      if (!reward) {
        throw new Error('Reward not found');
      }

      if (!reward.canAfford) {
        throw new Error('Insufficient tokens');
      }

      if (!reward.isAvailable) {
        throw new Error('Reward not available');
      }

      const mockRedemption: RewardRedemptionDto = {
        id: `redemption-${Date.now()}`,
        studentId: request.studentId,
        rewardId: reward.id,
        reward,
        tokenCost: reward.tokenCost,
        status: 'completed',
        redeemedAt: new Date().toISOString(),
        completedAt: new Date().toISOString(),
        processingTimeMinutes: 0
      };

      return mockRedemption;
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['availableRewards'] });
      setShowRedemptionModal(false);
      setSelectedReward(null);
    }
  });

  const mockTokenBalance = data?.studentTokenBalance || 0;

  const getCategoryDisplayName = (category: string): string => {
    const categoryMap: Record<string, string> = {
      'all': 'Ï†ÑÏ≤¥',
      'digital_badge': 'ÎîîÏßÄÌÑ∏ Î∞∞ÏßÄ',
      'feature_unlock': 'Í∏∞Îä• Ïû†Í∏à Ìï¥Ï†ú', 
      'virtual_item': 'Í∞ÄÏÉÅ ÏïÑÏù¥ÌÖú',
      'special_privilege': 'ÌäπÎ≥Ñ ÌòúÌÉù',
      'cosmetic': 'Ïô∏Í¥Ä Î≥ÄÍ≤Ω'
    };
    return categoryMap[category] || category;
  };

  const getFilteredRewards = (): RewardDto[] => {
    if (!data) return [];
    if (selectedCategory === 'all') return data.rewards;
    return data.rewards.filter(reward => reward.category === selectedCategory);
  };

  const getExpiryText = (expiresAt?: string): string => {
    if (!expiresAt) return '';
    
    const expiry = new Date(expiresAt);
    const now = new Date();
    const diffMs = expiry.getTime() - now.getTime();
    const diffDays = Math.floor(diffMs / (1000 * 60 * 60 * 24));
    
    if (diffDays < 1) return 'Í≥ß ÎßåÎ£å';
    if (diffDays === 1) return '1Ïùº ÌõÑ ÎßåÎ£å';
    return `${diffDays}Ïùº ÌõÑ ÎßåÎ£å`;
  };

  const handleRedeemClick = (reward: RewardDto) => {
    if (!reward.canAfford || !reward.isAvailable || !user) return;
    
    setSelectedReward(reward);
    setShowRedemptionModal(true);
  };

  const handleConfirmRedemption = () => {
    if (!selectedReward || !user) return;

    redeemMutation.mutate({
      studentId: user.id,
      rewardCode: selectedReward.code
    });
  };

  if (!user) {
    return <div>Î°úÍ∑∏Ïù∏Ïù¥ ÌïÑÏöîÌï©ÎãàÎã§.</div>;
  }

  if (user.role !== 'student') {
    return (
      <div className="max-w-4xl mx-auto p-6">
        <Card className="p-6 text-center">
          <p className="text-gray-600">ÌïôÏÉùÎßå Ïù¥Ïö©Ìï† Ïàò ÏûàÎäî Í∏∞Îä•ÏûÖÎãàÎã§.</p>
        </Card>
      </div>
    );
  }

  if (isLoading) {
    return (
      <div className="max-w-6xl mx-auto p-6">
        <div className="animate-pulse space-y-6">
          <div className="h-8 bg-gray-200 rounded w-1/3"></div>
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            {[...Array(6)].map((_, i) => (
              <div key={i} className="h-64 bg-gray-200 rounded"></div>
            ))}
          </div>
        </div>
      </div>
    );
  }

  if (error || !data) {
    return (
      <div className="max-w-4xl mx-auto p-6">
        <Card className="p-6 text-center">
          <p className="text-red-600">Î≥¥ÏÉÅ Î™©Î°ùÏùÑ Î∂àÎü¨Ïò¨ Ïàò ÏóÜÏäµÎãàÎã§.</p>
          <Button onClick={() => refetch()} className="mt-4">
            Îã§Ïãú ÏãúÎèÑ
          </Button>
        </Card>
      </div>
    );
  }

  const filteredRewards = getFilteredRewards();

  return (
    <FeatureGuard feature="rewards">
      <div className="max-w-6xl mx-auto p-6">
        {/* Ìó§Îçî */}
        <div className="flex justify-between items-center mb-8">
          <div>
            <h1 className="text-3xl font-bold text-gray-900">üéÅ Î≥¥ÏÉÅ ÏÉÅÏ†ê</h1>
            <p className="text-gray-600">ÌÜ†ÌÅ∞ÏúºÎ°ú Îã§ÏñëÌïú Î≥¥ÏÉÅÏùÑ ÍµêÌôòÌïòÏÑ∏Ïöî</p>
          </div>
          
          <div className="flex items-center space-x-4">
            {/* ÌÜ†ÌÅ∞ ÏûîÏï° */}
            <Card className="p-4 bg-gradient-to-r from-yellow-50 to-orange-50 border-yellow-200">
              <div className="flex items-center space-x-2">
                <span className="text-2xl">ü™ô</span>
                <div>
                  <div className="text-lg font-bold text-yellow-700">
                    {mockTokenBalance.toLocaleString()}
                  </div>
                  <div className="text-xs text-yellow-600">Î≥¥Ïú† ÌÜ†ÌÅ∞</div>
                </div>
              </div>
            </Card>
            
            <Select
              value={selectedCategory}
              onChange={(e) => setSelectedCategory(e.target.value)}
            >
              <option value="all">Ï†ÑÏ≤¥ Ïπ¥ÌÖåÍ≥†Î¶¨</option>
              {data.categories.map((category) => (
                <option key={category.category} value={category.category}>
                  {category.displayName} ({category.totalCount})
                </option>
              ))}
            </Select>
          </div>
        </div>

        {/* ÏµúÍ∑º ÍµêÌôò ÎÇ¥Ïó≠ */}
        {data.recentRedemptions.length > 0 && (
          <Card className="mb-8 p-6 bg-green-50 border-green-200">
            <h3 className="text-lg font-semibold mb-4 text-green-800">ÏµúÍ∑º ÍµêÌôòÌïú Î≥¥ÏÉÅ</h3>
            <div className="space-y-3">
              {data.recentRedemptions.map((redemption) => (
                <div key={redemption.id} className="flex items-center justify-between">
                  <div className="flex items-center space-x-3">
                    <span className="text-2xl">{redemption.reward?.iconUrl}</span>
                    <div>
                      <div className="font-medium">{redemption.reward?.name}</div>
                      <div className="text-sm text-gray-600 flex items-center space-x-2">
                        <Badge 
                          className={`text-xs ${
                            redemption.status === 'completed' ? 'bg-green-100 text-green-800' :
                            redemption.status === 'pending' ? 'bg-yellow-100 text-yellow-800' :
                            'bg-red-100 text-red-800'
                          }`}
                        >
                          {redemption.status === 'completed' ? 'ÏôÑÎ£å' :
                           redemption.status === 'pending' ? 'ÏßÑÌñâÏ§ë' : 'Ïã§Ìå®'}
                        </Badge>
                        <span>{new Date(redemption.redeemedAt).toLocaleDateString()}</span>
                      </div>
                    </div>
                  </div>
                  <div className="text-right">
                    <div className="font-medium text-yellow-600">-{redemption.tokenCost} ÌÜ†ÌÅ∞</div>
                  </div>
                </div>
              ))}
            </div>
          </Card>
        )}

        {/* Î≥¥ÏÉÅ Í∑∏Î¶¨Îìú */}
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          {filteredRewards.map((reward) => (
            <Card 
              key={reward.id} 
              className={`p-6 transition-all duration-200 ${
                reward.canAfford && reward.isAvailable 
                  ? 'hover:shadow-lg hover:scale-105 cursor-pointer' 
                  : 'opacity-60'
              }`}
              onClick={() => reward.canAfford && reward.isAvailable && handleRedeemClick(reward)}
            >
              <div className="text-center mb-4">
                <div className="text-4xl mb-2">{reward.iconUrl}</div>
                <h3 className="text-lg font-semibold mb-1">{reward.name}</h3>
                <Badge className={`text-xs ${
                  reward.category === 'digital_badge' ? 'bg-purple-100 text-purple-800' :
                  reward.category === 'feature_unlock' ? 'bg-blue-100 text-blue-800' :
                  reward.category === 'virtual_item' ? 'bg-pink-100 text-pink-800' :
                  reward.category === 'special_privilege' ? 'bg-orange-100 text-orange-800' :
                  'bg-gray-100 text-gray-800'
                }`}>
                  {getCategoryDisplayName(reward.category)}
                </Badge>
              </div>
              
              <p className="text-sm text-gray-600 mb-4 line-clamp-3">
                {reward.description}
              </p>
              
              <div className="space-y-2 mb-4">
                {/* Ïû¨Í≥† Ï†ïÎ≥¥ */}
                {reward.remainingStock !== undefined && (
                  <div className="flex justify-between text-sm">
                    <span>ÎÇ®ÏùÄ ÏàòÎüâ:</span>
                    <span className={reward.remainingStock > 0 ? 'text-green-600' : 'text-red-600'}>
                      {reward.remainingStock > 0 ? `${reward.remainingStock}Í∞ú` : 'ÌíàÏ†à'}
                    </span>
                  </div>
                )}
                
                {/* ÎßåÎ£åÏùº Ï†ïÎ≥¥ */}
                {reward.expiresAt && (
                  <div className="flex justify-between text-sm">
                    <span>ÎßåÎ£å:</span>
                    <span className="text-orange-600">{getExpiryText(reward.expiresAt)}</span>
                  </div>
                )}
                
                {/* ÍµêÌôò ÌöüÏàò */}
                <div className="flex justify-between text-sm text-gray-500">
                  <span>ÍµêÌôòÎêú ÌöüÏàò:</span>
                  <span>{reward.currentRedemptions}Ìöå</span>
                </div>
              </div>
              
              <div className="flex items-center justify-between">
                <div className="flex items-center space-x-1">
                  <span className="text-lg">ü™ô</span>
                  <span className={`text-lg font-bold ${
                    reward.canAfford ? 'text-yellow-600' : 'text-red-500'
                  }`}>
                    {reward.tokenCost.toLocaleString()}
                  </span>
                </div>
                
                <Button
                  size="sm"
                  disabled={!reward.canAfford || !reward.isAvailable || redeemMutation.isPending}
                  className={
                    reward.canAfford && reward.isAvailable 
                      ? 'bg-purple-600 hover:bg-purple-700' 
                      : 'bg-gray-300'
                  }
                >
                  {!reward.isAvailable ? 'Ïù¥Ïö©Î∂àÍ∞Ä' :
                   !reward.canAfford ? 'ÌÜ†ÌÅ∞Î∂ÄÏ°±' : 'ÍµêÌôòÌïòÍ∏∞'}
                </Button>
              </div>
            </Card>
          ))}
        </div>

        {filteredRewards.length === 0 && (
          <Card className="p-12 text-center">
            <div className="text-4xl mb-4">üîç</div>
            <h3 className="text-lg font-semibold mb-2">ÏÑ†ÌÉùÌïú Ïπ¥ÌÖåÍ≥†Î¶¨Ïóê Î≥¥ÏÉÅÏù¥ ÏóÜÏäµÎãàÎã§</h3>
            <p className="text-gray-600">Îã§Î•∏ Ïπ¥ÌÖåÍ≥†Î¶¨Î•º ÌôïÏù∏Ìï¥Î≥¥ÏÑ∏Ïöî</p>
            <Button 
              onClick={() => setSelectedCategory('all')} 
              className="mt-4"
            >
              Ï†ÑÏ≤¥ Î≥¥ÏÉÅ Î≥¥Í∏∞
            </Button>
          </Card>
        )}

        {/* ÍµêÌôò ÌôïÏù∏ Î™®Îã¨ */}
        <Modal 
          isOpen={showRedemptionModal} 
          onClose={() => setShowRedemptionModal(false)}
          title="Î≥¥ÏÉÅ ÍµêÌôò ÌôïÏù∏"
        >
          {selectedReward && (
            <div className="space-y-4">
              <div className="text-center">
                <div className="text-4xl mb-2">{selectedReward.iconUrl}</div>
                <h3 className="text-lg font-semibold">{selectedReward.name}</h3>
              </div>
              
              <p className="text-sm text-gray-600">{selectedReward.description}</p>
              
              <div className="bg-yellow-50 p-4 rounded-lg">
                <div className="flex items-center justify-between">
                  <span>ÏÜåÎ™®Îê† ÌÜ†ÌÅ∞:</span>
                  <span className="text-lg font-bold text-yellow-600">
                    ü™ô {selectedReward.tokenCost.toLocaleString()}
                  </span>
                </div>
                <div className="flex items-center justify-between mt-2">
                  <span>ÍµêÌôò ÌõÑ ÏûîÏï°:</span>
                  <span className="font-medium">
                    ü™ô {(mockTokenBalance - selectedReward.tokenCost).toLocaleString()}
                  </span>
                </div>
              </div>
              
              <div className="flex space-x-3">
                <Button
                  onClick={() => setShowRedemptionModal(false)}
                  variant="outline"
                  className="flex-1"
                  disabled={redeemMutation.isPending}
                >
                  Ï∑®ÏÜå
                </Button>
                <Button
                  onClick={handleConfirmRedemption}
                  className="flex-1 bg-purple-600 hover:bg-purple-700"
                  disabled={redeemMutation.isPending}
                >
                  {redeemMutation.isPending ? 'ÍµêÌôò Ï§ë...' : 'ÍµêÌôò ÌôïÏù∏'}
                </Button>
              </div>
            </div>
          )}
        </Modal>

        {/* ÌÜ†ÌÅ∞ ÌöçÎìù ÏïàÎÇ¥ */}
        <Card className="mt-8 p-6 bg-gradient-to-r from-blue-50 to-purple-50">
          <h3 className="text-lg font-semibold mb-3 text-blue-800">üí° ÌÜ†ÌÅ∞ ÌöçÎìù Î∞©Î≤ï</h3>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4 text-sm">
            <div className="space-y-2">
              <div className="flex items-start space-x-2">
                <span className="text-blue-600">üìö</span>
                <span>Î¨∏Ï†úÎ•º Ï†ïÌôïÌûà ÌíÄ ÎïåÎßàÎã§ ÌÜ†ÌÅ∞ ÌöçÎìù</span>
              </div>
              <div className="flex items-start space-x-2">
                <span className="text-blue-600">üî•</span>
                <span>Ïó∞ÏÜç ÌïôÏäµ(Ïä§Ìä∏Î¶≠) Ïú†ÏßÄ Ïãú Î≥¥ÎÑàÏä§ ÌÜ†ÌÅ∞</span>
              </div>
              <div className="flex items-start space-x-2">
                <span className="text-blue-600">üéØ</span>
                <span>ÏùºÏùº ÌïôÏäµ Î™©Ìëú Îã¨ÏÑ± Ïãú Ï∂îÍ∞Ä ÌÜ†ÌÅ∞</span>
              </div>
            </div>
            <div className="space-y-2">
              <div className="flex items-start space-x-2">
                <span className="text-purple-600">üèÜ</span>
                <span>Î¨∏Ï†úÏßë ÏôÑÏ£º Ïãú ÎåÄÎüâ ÌÜ†ÌÅ∞ ÏßÄÍ∏â</span>
              </div>
              <div className="flex items-start space-x-2">
                <span className="text-purple-600">‚≠ê</span>
                <span>ÏóÖÏ†Å Îã¨ÏÑ± Ïãú ÌäπÎ≥Ñ ÌÜ†ÌÅ∞ Î≥¥ÏÉÅ</span>
              </div>
              <div className="flex items-start space-x-2">
                <span className="text-purple-600">üéä</span>
                <span>Ïù¥Î≤§Ìä∏ Ï∞∏Ïó¨Î°ú Ï∂îÍ∞Ä ÌÜ†ÌÅ∞ Í∏∞Ìöå</span>
              </div>
            </div>
          </div>
        </Card>
      </div>
    </FeatureGuard>
  );
};